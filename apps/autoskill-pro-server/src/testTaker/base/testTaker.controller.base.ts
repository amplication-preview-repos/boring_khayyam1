/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TestTakerService } from "../testTaker.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TestTakerCreateInput } from "./TestTakerCreateInput";
import { TestTaker } from "./TestTaker";
import { TestTakerFindManyArgs } from "./TestTakerFindManyArgs";
import { TestTakerWhereUniqueInput } from "./TestTakerWhereUniqueInput";
import { TestTakerUpdateInput } from "./TestTakerUpdateInput";
import { ScoreFindManyArgs } from "../../score/base/ScoreFindManyArgs";
import { Score } from "../../score/base/Score";
import { ScoreWhereUniqueInput } from "../../score/base/ScoreWhereUniqueInput";
import { AnswerFindManyArgs } from "../../answer/base/AnswerFindManyArgs";
import { Answer } from "../../answer/base/Answer";
import { AnswerWhereUniqueInput } from "../../answer/base/AnswerWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TestTakerControllerBase {
  constructor(
    protected readonly service: TestTakerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestTaker })
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTestTaker(
    @common.Body() data: TestTakerCreateInput
  ): Promise<TestTaker> {
    return await this.service.createTestTaker({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        role: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TestTaker] })
  @ApiNestedQuery(TestTakerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async testTakers(@common.Req() request: Request): Promise<TestTaker[]> {
    const args = plainToClass(TestTakerFindManyArgs, request.query);
    return this.service.testTakers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        role: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestTaker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async testTaker(
    @common.Param() params: TestTakerWhereUniqueInput
  ): Promise<TestTaker | null> {
    const result = await this.service.testTaker({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        role: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestTaker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTestTaker(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() data: TestTakerUpdateInput
  ): Promise<TestTaker | null> {
    try {
      return await this.service.updateTestTaker({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestTaker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTestTaker(
    @common.Param() params: TestTakerWhereUniqueInput
  ): Promise<TestTaker | null> {
    try {
      return await this.service.deleteTestTaker({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/scores")
  @ApiNestedQuery(ScoreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "any",
  })
  async findScores(
    @common.Req() request: Request,
    @common.Param() params: TestTakerWhereUniqueInput
  ): Promise<Score[]> {
    const query = plainToClass(ScoreFindManyArgs, request.query);
    const results = await this.service.findScores(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        score: true,

        testTaker: {
          select: {
            id: true,
          },
        },

        test: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scores")
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async connectScores(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        connect: body,
      },
    };
    await this.service.updateTestTaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scores")
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async updateScores(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        set: body,
      },
    };
    await this.service.updateTestTaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scores")
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async disconnectScores(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        disconnect: body,
      },
    };
    await this.service.updateTestTaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/answers")
  @ApiNestedQuery(AnswerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "read",
    possession: "any",
  })
  async findAnswers(
    @common.Req() request: Request,
    @common.Param() params: TestTakerWhereUniqueInput
  ): Promise<Answer[]> {
    const query = plainToClass(AnswerFindManyArgs, request.query);
    const results = await this.service.findAnswers(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        answerContent: true,
        score: true,

        testTaker: {
          select: {
            id: true,
          },
        },

        question: {
          select: {
            id: true,
          },
        },

        test: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/answers")
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async connectAnswers(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() body: AnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      answers: {
        connect: body,
      },
    };
    await this.service.updateTestTaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/answers")
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async updateAnswers(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() body: AnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      answers: {
        set: body,
      },
    };
    await this.service.updateTestTaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/answers")
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async disconnectAnswers(
    @common.Param() params: TestTakerWhereUniqueInput,
    @common.Body() body: AnswerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      answers: {
        disconnect: body,
      },
    };
    await this.service.updateTestTaker({
      where: params,
      data,
      select: { id: true },
    });
  }
}
