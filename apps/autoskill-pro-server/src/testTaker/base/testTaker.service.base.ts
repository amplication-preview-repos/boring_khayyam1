/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TestTaker as PrismaTestTaker,
  Score as PrismaScore,
  Answer as PrismaAnswer,
} from "@prisma/client";

export class TestTakerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TestTakerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.testTaker.count(args);
  }

  async testTakers(
    args: Prisma.TestTakerFindManyArgs
  ): Promise<PrismaTestTaker[]> {
    return this.prisma.testTaker.findMany(args);
  }
  async testTaker(
    args: Prisma.TestTakerFindUniqueArgs
  ): Promise<PrismaTestTaker | null> {
    return this.prisma.testTaker.findUnique(args);
  }
  async createTestTaker(
    args: Prisma.TestTakerCreateArgs
  ): Promise<PrismaTestTaker> {
    return this.prisma.testTaker.create(args);
  }
  async updateTestTaker(
    args: Prisma.TestTakerUpdateArgs
  ): Promise<PrismaTestTaker> {
    return this.prisma.testTaker.update(args);
  }
  async deleteTestTaker(
    args: Prisma.TestTakerDeleteArgs
  ): Promise<PrismaTestTaker> {
    return this.prisma.testTaker.delete(args);
  }

  async findScores(
    parentId: string,
    args: Prisma.ScoreFindManyArgs
  ): Promise<PrismaScore[]> {
    return this.prisma.testTaker
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scores(args);
  }

  async findAnswers(
    parentId: string,
    args: Prisma.AnswerFindManyArgs
  ): Promise<PrismaAnswer[]> {
    return this.prisma.testTaker
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .answers(args);
  }
}
