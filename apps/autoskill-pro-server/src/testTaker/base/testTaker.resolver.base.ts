/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TestTaker } from "./TestTaker";
import { TestTakerCountArgs } from "./TestTakerCountArgs";
import { TestTakerFindManyArgs } from "./TestTakerFindManyArgs";
import { TestTakerFindUniqueArgs } from "./TestTakerFindUniqueArgs";
import { CreateTestTakerArgs } from "./CreateTestTakerArgs";
import { UpdateTestTakerArgs } from "./UpdateTestTakerArgs";
import { DeleteTestTakerArgs } from "./DeleteTestTakerArgs";
import { ScoreFindManyArgs } from "../../score/base/ScoreFindManyArgs";
import { Score } from "../../score/base/Score";
import { AnswerFindManyArgs } from "../../answer/base/AnswerFindManyArgs";
import { Answer } from "../../answer/base/Answer";
import { TestTakerService } from "../testTaker.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TestTaker)
export class TestTakerResolverBase {
  constructor(
    protected readonly service: TestTakerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "read",
    possession: "any",
  })
  async _testTakersMeta(
    @graphql.Args() args: TestTakerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TestTaker])
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "read",
    possession: "any",
  })
  async testTakers(
    @graphql.Args() args: TestTakerFindManyArgs
  ): Promise<TestTaker[]> {
    return this.service.testTakers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TestTaker, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "read",
    possession: "own",
  })
  async testTaker(
    @graphql.Args() args: TestTakerFindUniqueArgs
  ): Promise<TestTaker | null> {
    const result = await this.service.testTaker(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TestTaker)
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "create",
    possession: "any",
  })
  async createTestTaker(
    @graphql.Args() args: CreateTestTakerArgs
  ): Promise<TestTaker> {
    return await this.service.createTestTaker({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TestTaker)
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "update",
    possession: "any",
  })
  async updateTestTaker(
    @graphql.Args() args: UpdateTestTakerArgs
  ): Promise<TestTaker | null> {
    try {
      return await this.service.updateTestTaker({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestTaker)
  @nestAccessControl.UseRoles({
    resource: "TestTaker",
    action: "delete",
    possession: "any",
  })
  async deleteTestTaker(
    @graphql.Args() args: DeleteTestTakerArgs
  ): Promise<TestTaker | null> {
    try {
      return await this.service.deleteTestTaker(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Score], { name: "scores" })
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "any",
  })
  async findScores(
    @graphql.Parent() parent: TestTaker,
    @graphql.Args() args: ScoreFindManyArgs
  ): Promise<Score[]> {
    const results = await this.service.findScores(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Answer], { name: "answers" })
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "read",
    possession: "any",
  })
  async findAnswers(
    @graphql.Parent() parent: TestTaker,
    @graphql.Args() args: AnswerFindManyArgs
  ): Promise<Answer[]> {
    const results = await this.service.findAnswers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
