/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { EnumQuestionTypeField } from "./EnumQuestionTypeField";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { TestWhereUniqueInput } from "../../test/base/TestWhereUniqueInput";
import { AnswerListRelationFilter } from "../../answer/base/AnswerListRelationFilter";
import { OptionListRelationFilter } from "../../option/base/OptionListRelationFilter";

@InputType()
class QuestionWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  content?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumQuestionTypeField,
  })
  @IsEnum(EnumQuestionTypeField)
  @IsOptional()
  @Field(() => EnumQuestionTypeField, {
    nullable: true,
  })
  typeField?: "Option1";

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  marks?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => TestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TestWhereUniqueInput)
  @IsOptional()
  @Field(() => TestWhereUniqueInput, {
    nullable: true,
  })
  test?: TestWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => AnswerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AnswerListRelationFilter)
  @IsOptional()
  @Field(() => AnswerListRelationFilter, {
    nullable: true,
  })
  answers?: AnswerListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OptionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OptionListRelationFilter)
  @IsOptional()
  @Field(() => OptionListRelationFilter, {
    nullable: true,
  })
  options?: OptionListRelationFilter;
}

export { QuestionWhereInput as QuestionWhereInput };
