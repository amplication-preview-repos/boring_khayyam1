/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsEnum,
  IsInt,
  Min,
  Max,
  ValidateNested,
} from "class-validator";
import { EnumQuestionTypeField } from "./EnumQuestionTypeField";
import { TestWhereUniqueInput } from "../../test/base/TestWhereUniqueInput";
import { Type } from "class-transformer";
import { AnswerUpdateManyWithoutQuestionsInput } from "./AnswerUpdateManyWithoutQuestionsInput";
import { OptionUpdateManyWithoutQuestionsInput } from "./OptionUpdateManyWithoutQuestionsInput";

@InputType()
class QuestionUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  content?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumQuestionTypeField,
  })
  @IsEnum(EnumQuestionTypeField)
  @IsOptional()
  @Field(() => EnumQuestionTypeField, {
    nullable: true,
  })
  typeField?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  marks?: number | null;

  @ApiProperty({
    required: false,
    type: () => TestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TestWhereUniqueInput)
  @IsOptional()
  @Field(() => TestWhereUniqueInput, {
    nullable: true,
  })
  test?: TestWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => AnswerUpdateManyWithoutQuestionsInput,
  })
  @ValidateNested()
  @Type(() => AnswerUpdateManyWithoutQuestionsInput)
  @IsOptional()
  @Field(() => AnswerUpdateManyWithoutQuestionsInput, {
    nullable: true,
  })
  answers?: AnswerUpdateManyWithoutQuestionsInput;

  @ApiProperty({
    required: false,
    type: () => OptionUpdateManyWithoutQuestionsInput,
  })
  @ValidateNested()
  @Type(() => OptionUpdateManyWithoutQuestionsInput)
  @IsOptional()
  @Field(() => OptionUpdateManyWithoutQuestionsInput, {
    nullable: true,
  })
  options?: OptionUpdateManyWithoutQuestionsInput;
}

export { QuestionUpdateInput as QuestionUpdateInput };
